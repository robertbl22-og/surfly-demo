{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["initCfg","widget_key","settings","follower_redirect_url","url","App","useState","session","isSessionStarted","cobrowser","setCobrowser","useEffect","Surfly","init","initResult","success","console","log","isInsideSession","on","warn","className","src","logo","alt","type","size","icon","onClick","document","location","startLeader","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"+wBAMA,IAAMA,EAAU,CACdC,WAAY,oCAERC,EAAW,CACfC,sBAAuB,+CACvBC,IAAK,8FA4DQC,MAzDf,WAAgB,IAAD,EACqBC,mBAAS,CAAEC,QAAS,KAAMC,kBAAkB,IADjE,mBACNC,EADM,KACKC,EADL,KAsCb,OAnCAC,qBAAU,WACRC,OAAOC,KAAKb,GAAS,SAASc,GAC5B,GAAIA,EAAWC,QAGb,GAFAC,QAAQC,IAAI,8BAERL,OAAOM,gBACTF,QAAQC,IAAI,kCACZP,EAAa,EAAD,GAAMD,EAAN,CAAiBD,kBAAkB,SAC1C,CAEL,IAAMD,EAAUK,OAAOL,QAAQL,GAC/BQ,EAAa,EAAD,GAAMD,EAAN,CAAiBF,aAC7BA,EAAQY,GAAG,mBAAmB,WAC5BH,QAAQC,IAAI,6BACZP,EAAa,EAAD,GAAMD,EAAN,CAAiBD,kBAAkB,aAInDQ,QAAQI,KAAK,kDAGhB,IAeD,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,+DACCf,EAAUD,iBACT,kBAAC,IAAD,CAAQiB,KAAK,UAAUC,KAAK,QAAQC,KAAK,cAAcC,QAXnC,WAC1BC,SAASC,SACP,+FASI,0BAIA,kBAAC,IAAD,CAAQL,KAAK,UAAUC,KAAK,QAAQC,KAAK,MAAMC,QAtBvB,WAE1BnB,GAAaA,EAAUF,SACzBE,EAAUF,QAAQwB,gBAmBd,sBClDUC,QACW,cAA7BC,OAAOH,SAASI,UAEe,UAA7BD,OAAOH,SAASI,UAEhBD,OAAOH,SAASI,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASR,SAASS,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.23bf3c3d.chunk.js","sourcesContent":["/* global Surfly */\nimport React, { useEffect, useState } from \"react\"\nimport { Button } from \"antd\"\nimport logo from \"./logo.svg\"\nimport \"./App.css\"\n\nconst initCfg = {\n  widget_key: \"0237ad51dae843cc8ca12af5cfa829ae\",\n}\nconst settings = {\n  follower_redirect_url: \"https://robertbl22-og.github.io/surfly-demo/\",\n  url: \"https://renew.txdmv.gov/Renew/registrationrenewal/jsp/txdot_reg_ren_enter_vehicle_info.jsp\",\n}\n\nfunction App() {\n  const [cobrowser, setCobrowser] = useState({ session: null, isSessionStarted: false })\n\n  useEffect(() => {\n    Surfly.init(initCfg, function(initResult) {\n      if (initResult.success) {\n        console.log(\"Surfly initResult.success!\")\n        // API calls can now be made!\n        if (Surfly.isInsideSession) {\n          console.log(\"Surfly Surfly.isInsideSession:\")\n          setCobrowser({ ...cobrowser, isSessionStarted: true })\n        } else {\n          // Surfly.button(); // Default Surfly button\n          const session = Surfly.session(settings)\n          setCobrowser({ ...cobrowser, session })\n          session.on(\"session_started\", () => {\n            console.log(\"Surfly 'session_started'!\")\n            setCobrowser({ ...cobrowser, isSessionStarted: true })\n          })\n        }\n      } else {\n        console.warn(\"Surfly was unable to initialize properly.\")\n      }\n    })\n  }, [])\n\n  const handleStartSessionClick = () => {\n    // Surfly.session(settings).startLeader()\n    if (cobrowser && cobrowser.session) {\n      cobrowser.session.startLeader()\n    }\n  }\n\n  const handleOpenSiteClick = () => {\n    document.location =\n      \"https://renew.txdmv.gov/Renew/registrationrenewal/jsp/txdot_reg_ren_enter_vehicle_info.jsp\"\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Let&rsquo;s start your renewal...</p>\n        {cobrowser.isSessionStarted ? (\n          <Button type=\"primary\" size=\"large\" icon=\"arrow-right\" onClick={handleOpenSiteClick}>\n            Renew Registration Now\n          </Button>\n        ) : (\n          <Button type=\"primary\" size=\"large\" icon=\"api\" onClick={handleStartSessionClick}>\n            Start a Session\n          </Button>\n        )}\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}